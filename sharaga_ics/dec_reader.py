import json
from datetime import datetime, timedelta
import aiohttp
from ics import Calendar, Event
from ics.grammar.parse import ContentLine
from collections import OrderedDict

from . import classes


LOCATIONS = """
1 	–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ó–µ–º–ª—è–Ω–æ–π –í–∞–ª, –¥.73
2 	–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ó–µ–º–ª—è–Ω–æ–π –í–∞–ª, –¥.71
5 	–≥. –ú–æ—Å–∫–≤–∞, —É–ª.–ù–∞—Ä–æ–¥–Ω–æ–≥–æ –û–ø–æ–ª—á–µ–Ω–∏—è, –¥.38, –∫–æ—Ä–ø.2
8 	–≥.–ú–æ—Å–∫–≤–∞, —É–ª.–®–∞–±–æ–ª–æ–≤–∫–∞, –¥.14, —Å—Ç—Ä.9
9 	–≥.–ú–æ—Å–∫–≤–∞, —É–ª.–¢–∞–ª–∞–ª–∏—Ö–∏–Ω–∞, –¥.31
10 	–≥.–ú–æ—Å–∫–≤–∞, –ø—Ä.3-–π –•–æ—Ä–æ—à–µ–≤—Å–∫–∏–π, –¥.1, –∫.3
11 	–≥.–ú–æ—Å–∫–≤–∞, —É–ª. –ö–æ—Å—Ç–æ–º–∞—Ä–æ–≤—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, –¥.29, –∫–æ—Ä–ø.1
12 	–≥.–ú–æ—Å–∫–≤–∞, —É–ª. –ö–æ—Å—Ç–æ–º–∞—Ä–æ–≤—Å–∫–∞—è –Ω–∞–±–µ—Ä–µ–∂–Ω–∞—è, –¥.29, –∫–æ—Ä–ø.2
13 	–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ó–µ–º–ª—è–Ω–æ–π –í–∞–ª, –¥.71, –∫.2 (–£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–∏–π –±–∞—Å—Å–µ–π–Ω)
""".strip().split(
    "\n"
)
LOCATIONS = {
    placeId: address
    for placeId, address in [location.split(" \t") for location in LOCATIONS]
}
LINES = {
    "1": ["#EF161E", None],  # –°–æ–∫–æ–ª—å–Ω–∏—á–µ—Å–∫–∞—è
    "2": ["#2DBE2C", None],  # –ó–∞–º–æ—Å–∫–≤–æ—Ä–µ—Ü–∫–∞—è
    "3": ["#0078BE", None],  # –ê—Ä–±–∞—Ç—Å–∫–æ-–ü–æ–∫—Ä–æ–≤—Å–∫–∞—è
    "4": ["#00BFFF", None],  # –§–∏–ª—ë–≤—Å–∫–∞—è
    "4–ê": ["#00BFFF", None],  # –§–∏–ª—ë–≤—Å–∫–∞—è
    "5": ["#8D5B2D", "üü§"],  # –ö–æ–ª—å—Ü–µ–≤–∞—è
    "6": ["#ED9121", "üü†"],  # –ö–∞–ª—É–∂—Å–∫–æ-–†–∏–∂—Å–∫–∞—è
    "7": ["#800080", "üü£"],  # –¢–∞–≥–∞–Ω—Å–∫–æ-–ö—Ä–∞—Å–Ω–æ–ø—Ä–µ—Å–Ω–µ–Ω—Å–∫–∞—è
    "8": ["#FFD702", None],  # –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∞—è
    "8–ê": ["#FFD702", None],  # –°–æ–ª–Ω—Ü–µ–≤—Å–∫–∞—è
    "8–ö–°": ["#FFD702", None],  # –ö–∞–ª–∏–Ω–∏–Ω—Å–∫–æ-–°–æ–ª–Ω—Ü–µ–≤—Å–∫–∞—è
    "9": ["#999999", None],  # –°–µ—Ä–ø—É—Ö–æ–≤—Å–∫–æ-–¢–∏–º–∏—Ä—è–∑–µ–≤—Å–∫–∞—è
    "10": ["#99CC00", "üü¢"],  # –õ—é–±–ª–∏–Ω—Å–∫–æ-–î–º–∏—Ç—Ä–æ–≤—Å–∫–∞—è
    "11": ["#82C0C0", None],  # –ë–æ–ª—å—à–∞—è –∫–æ–ª—å—Ü–µ–≤–∞—è
    "11–ê": ["#82C0C0", None],  # –ë–æ–ª—å—à–∞—è –∫–æ–ª—å—Ü–µ–≤–∞—è
    "11–ö": ["#231F20", None],  # –ö–∞—Ö–æ–≤—Å–∫–∞—è (–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∞—è –ª–∏–Ω–∏—è)
    "12": ["#A1B3D4", None],  # –ë—É—Ç–æ–≤—Å–∫–∞—è
    "13": ["#9999FF", None],  # –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –º–æ–Ω–æ—Ä–µ–ª—å—Å
    "14": ["#FFFFFF", None],  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ –∫–æ–ª—å—Ü–æ
    "15": ["#DE64A1", None],  # –ù–µ–∫—Ä–∞—Å–æ–≤—Å–∫–∞—è
    "16": ["#D8D8D8", None],  # –¢—Ä–æ–∏—Ü–∫–∞—è (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    "17": ["#231F20", None],  # –†—É–±–ª—ë–≤–æ-–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    "18": ["#231F20", None],  # –ë–∏—Ä—é–ª—ë–≤—Å–∫–∞—è (–≤—Ä–µ–º–µ–Ω–Ω–æ)
    "D1": ["#f6a600", None],  # –ú–¶–î-1
    "D2": ["#e74280", None],  # –ú–¶–î-2
    "D3": ["#e95b0c", None],  # –ú–¶–î-3
    "D4": ["#40b280", None],  # –ú–¶–î-4
    "D5": ["#77b729", None],  # –ú–¶–î-5
    "0": ["#231F20", None],  # –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–∏—Ä—É—é—â–∏—Ö—Å—è –ª–∏–Ω–∏–π
}
NEAREST_METRO_STATIONS = {
    "1": dict(line="5", station="–¢–∞–≥–∞–Ω—Å–∫–∞—è"),
    "2": dict(line="5", station="–¢–∞–≥–∞–Ω—Å–∫–∞—è"),
    "5": dict(line="7", station="–û–∫—Ç—è–±—Ä—å—Å–∫–æ–µ –ø–æ–ª–µ"),
    "8": dict(line="6", station="–®–∞–±–æ–ª–æ–≤—Å–∫–∞—è"),
    "9": dict(line="10", station="–ö—Ä–µ—Å—Ç—å—è–Ω—Å–∫–∞—è –∑–∞—Å—Ç–∞–≤–∞"),
    "10": dict(line="7", station="–ë–µ–≥–æ–≤–∞—è"),
    "11": dict(line="10", station="–ß–∫–∞–ª–æ–≤—Å–∫–∞—è"),
    "12": dict(line="10", station="–ß–∫–∞–ª–æ–≤—Å–∫–∞—è"),
    "13": dict(line="5", station="–¢–∞–≥–∞–Ω—Å–∫–∞—è"),
}
TEAMS_URLS = {}


def force_metro_emojis():
    for ms in NEAREST_METRO_STATIONS.values():
        assert (
            LINES[ms["line"]][1] is not None
        ), f"–õ–∏–Ω–∏—è {ms['line']} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —à–∞—Ä–∞–≥–æ–π, –∞ —ç–º–æ–¥–∑–∏ –Ω–µ—Ç"


force_metro_emojis()

__version__ = "0.2.5p1"


async def get_teams_urls():
    global TEAMS_URLS
    try:
        async with aiohttp.ClientSession(
            base_url="https://mgutm.ru/", raise_for_status=True
        ) as session:
            async with session.get("/wp-json/prepods/v1/info") as resp:
                TEAMS_URLS = {link["name"]: link["url"] for link in await resp.json()}
    except aiohttp.client_exceptions.ClientResponseError:
        TEAMS_URLS = {}


class MgutmParser(classes.TimetableSource):
    def generate_ical(self, tt):
        print("downloaded timetable")
        cal = Calendar()
        for name in ["NAME", "X-WR-CALNAME"]:
            cal.extra.append(
                ContentLine(
                    name,
                    value=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {tt['info']['group']['name']} (sharaga.octonezd.me)",
                )
            )
        cal.extra.append(ContentLine("X-PUBLISHED-TTL", value="PT12H"))
        cal.extra.append(
            ContentLine(
                "URL",
                value=f"webcal://sharaga.octonezd.me/group/{tt['info']['group']['groupID']}.ics",
            )
        )
        debug_info = Event(
            name="–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
            begin=datetime(1970, 1, 1),
            end=datetime(1970, 1, 1),
        )
        debug_info.description = f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {datetime.now()}\n–í–µ—Ä—Å–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {__version__}\ngid:{tt['info']['group']['groupID']}"
        cal.events.add(debug_info)
        for lesson in tt["rasp"]:
            event = Event(
                name=lesson["–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞"],
                begin=datetime.fromisoformat(lesson["–¥–∞—Ç–∞–ù–∞—á–∞–ª–∞"] + "+03:00"),
                end=datetime.fromisoformat(lesson["–¥–∞—Ç–∞–û–∫–æ–Ω—á–∞–Ω–∏—è"] + "+03:00"),
            )
            event.description = (
                f'–ü—Ä–µ–ø–æ–¥: {lesson["–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"]}'
            )
            if "-" in lesson["–∞—É–¥–∏—Ç–æ—Ä–∏—è"]:
                location_id, room = lesson["–∞—É–¥–∏—Ç–æ—Ä–∏—è"].split("-")
                event.extra.append(ContentLine("X-SHARAGA-ROOM", value=room))
                if location_id in LOCATIONS:
                    nearest_metro = NEAREST_METRO_STATIONS[location_id]
                    metro_info = (
                        f"{LINES[nearest_metro['line']][1]}{nearest_metro['station']}"
                    )

                    location = f"{metro_info}, {LOCATIONS[location_id]}, –∫–∞–±. {room}"
                    event.extra.append(
                        ContentLine("X-SHARAGA-LOCATION", value=LOCATIONS[location_id])
                    )
                    event.extra.append(
                        ContentLine("X-SHARAGA-METRO", value=nearest_metro["station"])
                    )
                    event.extra.append(
                        ContentLine("X-SHARAGA-METRO-LINE", value=nearest_metro["line"])
                    )
                else:
                    location = f"–•—É–π –∑–Ω–∞–µ—Ç –≥–¥–µ, –∫–∞–±. {room}"
                    event.extra.append(
                        ContentLine("X-SHARAGA-LOCATION", value="–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                    )
            else:
                location = TEAMS_URLS.get(
                    lesson["–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å"], "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                )
                if "–î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ" not in location:
                    event.extra.append(
                        ContentLine("X-GOOGLE-CONFERENCE", value=location)
                    )
            event.location = location
            cal.events.add(event)
        return str(cal)

    async def get_groups(self):
        tmpgroups = {}
        async with aiohttp.ClientSession(
            base_url="https://dec.mgutm.ru/", raise_for_status=True
        ) as session:
            async with session.get("/api/Groups") as resp:
                groupdata = await resp.json()
                for group in groupdata["data"]["groups"]:
                    tmpgroups[group["groupName"]] = str(group["groupID"])
        return OrderedDict(sorted(tmpgroups.items(), key=lambda x: x[0]))

    async def get_teachers(self):
        teachers = {}
        async with aiohttp.ClientSession(
            base_url="https://dec.mgutm.ru/", raise_for_status=True
        ) as session:
            async with session.get("/api/raspTeacherlist") as resp:
                teacherdata = await resp.json()
                for teacher in teacherdata["data"]:
                    teachers[teacher["name"]] = str(teacher["id"])
        return OrderedDict(sorted(teachers.items(), key=lambda x: x[0]))

    async def get_new_ics(self, ics_type, gid):
        async with aiohttp.ClientSession(
            base_url="https://dec.mgutm.ru/", raise_for_status=True
        ) as session:
            async with session.get(
                "/api/Rasp", params={f"id{ics_type.title()}": gid}
            ) as resp:
                tt = (await resp.json())["data"]
        tt = self.generate_ical(tt)
        return tt


if __name__ == "__main__":
    import asyncio

    asyncio.run(get_teams_urls())
    with open("rasp.json", encoding="utf-8") as f:
        tt = json.load(f)["data"]

    rdr = MgutmParser()
    ical = rdr.generate_ical(tt)
    with open("test.ics", "w", newline="", encoding="utf-8") as f:
        f.write(ical)
    print(LOCATIONS, TEAMS_URLS)
